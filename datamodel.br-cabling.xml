<?xml version="1.0" encoding="UTF-8"?>
<itop_design xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.7">
    <!--
    * @license     https://www.gnu.org/licenses/gpl-3.0.en.html
    -->
    <classes>
        <!-- All in all, it is a terrible idea to heavily modify iTop in this way, as many other extensions will no longer work.
        Every extension on the iTop Hub is designed to work with the default installation.
        This many changes will break compatibility and upgrade paths. -->

        <class id="InterfaceSpeed" _delta="must_exist">
            <properties>
                <uniqueness_rules>
                    <rule id="name" _delta="delete_if_exists" />
                    <rule id="bitspeed" _delta="define">
                        <attributes>
                            <attribute id="bitspeed" />
                        </attributes>
                        <filter />
                        <disabled>false</disabled>
                        <is_blocking>true</is_blocking>
                    </rule>
                </uniqueness_rules>
            </properties>
            <fields>
                <field id="bitspeed" xsi:type="AttributeDecimal" _delta="define">
                    <sql>bitspeed</sql>
                    <default_value />
                    <is_null_allowed>false</is_null_allowed>
                    <duplicates>false</duplicates>
                    <digits>18</digits>
                    <decimals>0</decimals>
                </field>
            </fields>
            <methods>
                <method id="GetAttributeFlags" _delta="define">
                    <static>false</static>
                    <access>public</access>
                    <type>Overload-DBObject</type>
                    <code>
                        <![CDATA[public function GetAttributeFlags($sAttCode, &$aReasons = array(), $sTargetState = '')
					    {
						    // Force the computed field to be read-only, preventing it to be written
						    if (($sAttCode == 'name'))
							    return(OPT_ATT_READONLY | parent::GetAttributeFlags($sAttCode, $aReasons, $sTargetState));
						    return parent::GetAttributeFlags($sAttCode, $aReasons, $sTargetState);
					    }]]>
                    </code>
                </method>
                <method id="GetInitialStateAttributeFlags" _delta="define">
                    <static>false</static>
                    <access>public</access>
                    <type>Overload-DBObject</type>
                    <code>
                        <![CDATA[public function GetInitialStateAttributeFlags($sAttCode, &$aReasons = array())
					    {
						    // Hide the calculated field in object creation form
						    if (($sAttCode == 'name'))
							    return(OPT_ATT_HIDDEN | parent::GetInitialStateAttributeFlags($sAttCode, $aReasons));
						    return parent::GetInitialStateAttributeFlags($sAttCode, $aReasons);
					    }]]>
                    </code>
                </method>
                <method id="OnInsert" _delta="define">
                    <static>false</static>
                    <access>public</access>
                    <type>Overload-DBObject</type>
                    <code>
                        <![CDATA[public function OnInsert()
					    {
						    $this->SetName();
					    }]]>
                    </code>
                </method>
                <method id="OnUpdate" _delta="define">
                    <static>false</static>
                    <access>public</access>
                    <type>Overload-DBObject</type>
                    <code>
                        <![CDATA[public function OnUpdate()
					    {
						    $this->SetName();
					    }]]>
                    </code>
                </method>
                <method id="SetName" _delta="define">
                    <static>false</static>
                    <access>public</access>
                    <type>Overload-DBObject</type>
                    <code>
                        <![CDATA[public function SetName()
					    {
                            // read the new value of the bitSpeed
                            $dBitSpeed = $this->Get('bitspeed');

                            // failsafe, the field cannot be empty
                            $sName = $dBitSpeed." b";

                            if(is_numeric($dBitSpeed))
                            {
                                $sUnit = ' KMGTP';
                                for ($iLevel=15; $iLevel >0 ;$iLevel=$iLevel-3)
                                {
                                    if ($dBitSpeed >= 10**$iLevel)
                                    {
                                        $sName = sprintf('%.3g ', $dBitSpeed / (10**$iLevel)) . substr($sUnit, $iLevel/3, 1) . 'b/s';
                                        break;
                                    }
                                }
                            }
                            $this->Set('name', $sName);
					    }]]>
                    </code>
                </method>
            </methods>
            <presentation>
                <details>
                    <items>
                        <item id="bitspeed" _delta="define">
                            <rank>15</rank>
                        </item>
                    </items>
                </details>
                <list>
                    <items>
                        <item id="bitspeed" _delta="define">
                            <rank>15</rank>
                        </item>
                    </items>
                </list>
            </presentation>
        </class>

        <!-- Patch Cables Colors -->
        <class id="PatchCableColor" _delta="define">
            <parent>Typology</parent>
            <properties>
                <category>bizmodel,searchable,configmgmt</category>
                <abstract>false</abstract>
                <key_type>autoincrement</key_type>
                <db_table>patchcablecolor</db_table>
                <db_key_field>id</db_key_field>
                <db_final_class_field />
                <naming>
                    <attributes>
                        <attribute id="name" />
                    </attributes>
                </naming>
                <display_template />
                <!-- Ignore icon <icon>images/patchcablecolor.png</icon> -->
                <reconciliation>
                    <attributes>
                        <attribute id="name" />
                    </attributes>
                </reconciliation>
                <uniqueness_rules>
                    <rule id="name">
                        <attributes>
                            <attribute id="name" />
                        </attributes>
                        <filter />
                        <disabled>false</disabled>
                        <is_blocking>true</is_blocking>
                    </rule>
                </uniqueness_rules>
            </properties>
            <fields>
                <field id="description" xsi:type="AttributeText">
                    <sql>description</sql>
                    <default_value />
                    <is_null_allowed>true</is_null_allowed>
                </field>
                <field id="patchcable_list" xsi:type="AttributeLinkedSet">
                    <linked_class>PatchCable</linked_class>
                    <ext_key_to_me>patchcablecolor_id</ext_key_to_me>
                    <edit_mode>add_only</edit_mode>
                    <count_min>0</count_min>
                    <count_max>0</count_max>
                    <duplicates />
                </field>
            </fields>
            <methods />
            <presentation>
                <details>
                    <items>
                        <item id="name">
                            <rank>10</rank>
                        </item>
                        <item id="description">
                            <rank>20</rank>
                        </item>
                        <item id="patchcable_list">
                            <rank>100</rank>
                        </item>
                    </items>
                </details>
                <search>
                    <items>
                        <item id="name">
                            <rank>10</rank>
                        </item>
                        <item id="description">
                            <rank>20</rank>
                        </item>
                    </items>
                </search>
                <list>
                    <items>
                        <item id="description">
                            <rank>20</rank>
                        </item>
                    </items>
                </list>
            </presentation>
        </class>
        <!-- Patch Cables Type -->
        <class id="PatchCableType" _delta="define">
            <parent>Typology</parent>
            <properties>
                <category>bizmodel,searchable,configmgmt</category>
                <abstract>false</abstract>
                <key_type>autoincrement</key_type>
                <db_table>patchcabletype</db_table>
                <db_key_field>id</db_key_field>
                <db_final_class_field />
                <naming>
                    <attributes>
                        <attribute id="name" />
                    </attributes>
                </naming>
                <display_template />
                <!-- Ignore icon <icon>images/patchcabletype.png</icon> -->
                <reconciliation>
                    <attributes>
                        <attribute id="name" />
                    </attributes>
                </reconciliation>
                <uniqueness_rules>
                    <rule id="name">
                        <attributes>
                            <attribute id="name" />
                        </attributes>
                        <filter />
                        <disabled>false</disabled>
                        <is_blocking>true</is_blocking>
                    </rule>
                </uniqueness_rules>
            </properties>
            <fields>
                <field id="description" xsi:type="AttributeText">
                    <sql>description</sql>
                    <default_value />
                    <is_null_allowed>true</is_null_allowed>
                </field>
                <field id="patchcable_list" xsi:type="AttributeLinkedSet">
                    <linked_class>PatchCable</linked_class>
                    <ext_key_to_me>patchcabletype_id</ext_key_to_me>
                    <edit_mode>add_only</edit_mode>
                    <count_min>0</count_min>
                    <count_max>0</count_max>
                    <duplicates />
                </field>
            </fields>
            <methods />
            <presentation>
                <details>
                    <items>
                        <item id="name">
                            <rank>10</rank>
                        </item>
                        <item id="description">
                            <rank>20</rank>
                        </item>
                        <item id="patchcable_list">
                            <rank>100</rank>
                        </item>
                    </items>
                </details>
                <search>
                    <items>
                        <item id="name">
                            <rank>10</rank>
                        </item>
                        <item id="description">
                            <rank>20</rank>
                        </item>
                    </items>
                </search>
                <list>
                    <items>
                        <item id="description">
                            <rank>20</rank>
                        </item>
                    </items>
                </list>
            </presentation>
        </class>

        <!-- Patch Cables -->
        <class id="PatchCable" _delta="define">
            <parent>FunctionalCI</parent>
            <properties>
                <category>bizmodel,searchable</category>
                <abstract>false</abstract>
                <key_type>autoincrement</key_type>
                <db_table>patchcable</db_table>
                <db_key_field>id</db_key_field>
                <db_final_class_field />
                <naming>
                    <attributes>
                        <attribute id="name" />
                    </attributes>
                </naming>
                <display_template />
                <icon>images/patchcable.png</icon>
                <reconciliation>
                    <attributes>
                        <attribute id="name" />
                        <attribute id="org_id" />
                        <attribute id="organization_name" />
                        <attribute id="location_id" />
                        <attribute id="location_name" />
                    </attributes>
                </reconciliation>
                <obsolescence>
                    <condition>
                        <![CDATA[status = 'obsolete']]>
                    </condition>
                </obsolescence>
            </properties>
            <fields>
                <field id="location_id" xsi:type="AttributeExternalKey">
                    <filter>
                        <![CDATA[SELECT l FROM Location AS l JOIN Organization AS root ON l.org_id=root.id JOIN Organization AS child ON child.parent_id BELOW root.id WHERE child.id= :this->org_id]]>
                    </filter>
                    <dependencies>
                        <attribute id="org_id" />
                    </dependencies>
                    <sql>location_id</sql>
                    <target_class>Location</target_class>
                    <is_null_allowed>true</is_null_allowed>
                    <on_target_delete>DEL_MANUAL</on_target_delete>
                    <allow_target_creation>false</allow_target_creation>
                </field>
                <field id="location_name" xsi:type="AttributeExternalField">
                    <extkey_attcode>location_id</extkey_attcode>
                    <target_attcode>name</target_attcode>
                </field>
                <field id="status" xsi:type="AttributeEnum">
                    <values>
                        <value id="production">production</value>
                        <value id="implementation">implementation</value>
                        <value id="stock">stock</value>
                        <value id="obsolete">obsolete</value>
                    </values>
                    <sql>status</sql>
                    <default_value>production</default_value>
                    <is_null_allowed>true</is_null_allowed>
                    <display_style>list</display_style>
                </field>
                <field id="patchcablecolor_id" xsi:type="AttributeExternalKey">
                    <sql>patchcablecolor_id</sql>
                    <target_class>PatchCableColor</target_class>
                    <is_null_allowed>true</is_null_allowed>
                    <on_target_delete>DEL_MANUAL</on_target_delete>
                </field>
                <field id="patchcablecolor_name" xsi:type="AttributeExternalField">
                    <extkey_attcode>patchcablecolor_id</extkey_attcode>
                    <target_attcode>name</target_attcode>
                </field>
                <field id="patchcabletype_id" xsi:type="AttributeExternalKey">
                    <sql>patchcabletype_id</sql>
                    <target_class>PatchCableType</target_class>
                    <is_null_allowed>true</is_null_allowed>
                    <on_target_delete>DEL_MANUAL</on_target_delete>
                </field>
                <field id="patchcabletype_name" xsi:type="AttributeExternalField">
                    <extkey_attcode>patchcabletype_id</extkey_attcode>
                    <target_attcode>name</target_attcode>
                </field>
                <field id="interfaceconnector_a_id" xsi:type="AttributeExternalKey">
                    <sql>interfaceconnector_a_id</sql>
                    <target_class>InterfaceConnector</target_class>
                    <is_null_allowed>false</is_null_allowed>
                    <on_target_delete>DEL_MANUAL</on_target_delete>
                </field>
                <field id="interfaceconnector_a_name" xsi:type="AttributeExternalField">
                    <extkey_attcode>interfaceconnector_a_id</extkey_attcode>
                    <target_attcode>name</target_attcode>
                </field>
                <field id="remote_a_ci_id" xsi:type="AttributeExternalKey">
                    <sql>remote_a_ci_id</sql>
                    <target_class>ConnectableCI</target_class>
                    <is_null_allowed>true</is_null_allowed>
                    <on_target_delete>DEL_AUTO</on_target_delete>
                </field>
                <field id="remote_a_ci_name" xsi:type="AttributeExternalField">
                    <extkey_attcode>remote_a_ci_id</extkey_attcode>
                    <target_attcode>name</target_attcode>
                </field>
                <field id="remote_a_interface_id" xsi:type="AttributeExternalKey">
                    <sql>remote_a_interface_id</sql>
                    <target_class>PhysicalInterface</target_class>
                    <is_null_allowed>true</is_null_allowed>
                    <on_target_delete>DEL_MANUAL</on_target_delete>
                    <filter>
                        <![CDATA[SELECT PhysicalInterface WHERE patchcable_id = '' AND interfaceconnector_id = :this->interfaceconnector_a_id AND connectableci_id = :this->remote_a_ci_id]]>
                    </filter>
                    <dependencies>
                        <attribute id="remote_a_ci_id" />
                        <attribute id="interfaceconnector_a_id" />
                    </dependencies>
                </field>
                <field id="remote_a_interface_name" xsi:type="AttributeExternalField">
                    <extkey_attcode>remote_a_interface_id</extkey_attcode>
                    <target_attcode>name</target_attcode>
                </field>
                <field id="interfaceconnector_b_id" xsi:type="AttributeExternalKey">
                    <sql>interfaceconnector_b_id</sql>
                    <target_class>InterfaceConnector</target_class>
                    <is_null_allowed>false</is_null_allowed>
                    <on_target_delete>DEL_MANUAL</on_target_delete>
                </field>
                <field id="interfaceconnector_b_name" xsi:type="AttributeExternalField">
                    <extkey_attcode>interfaceconnector_b_id</extkey_attcode>
                    <target_attcode>name</target_attcode>
                </field>
                <field id="remote_b_ci_id" xsi:type="AttributeExternalKey">
                    <sql>remote_b_ci_id</sql>
                    <target_class>ConnectableCI</target_class>
                    <is_null_allowed>true</is_null_allowed>
                    <on_target_delete>DEL_AUTO</on_target_delete>
                </field>
                <field id="remote_b_ci_name" xsi:type="AttributeExternalField">
                    <extkey_attcode>remote_a_ci_id</extkey_attcode>
                    <target_attcode>name</target_attcode>
                </field>
                <field id="remote_b_interface_id" xsi:type="AttributeExternalKey">
                    <sql>remote_b_interface_id</sql>
                    <target_class>PhysicalInterface</target_class>
                    <is_null_allowed>true</is_null_allowed>
                    <on_target_delete>DEL_MANUAL</on_target_delete>
                    <filter>
                        <![CDATA[SELECT PhysicalInterface WHERE patchcable_id = '' AND interfaceconnector_id = :this->interfaceconnector_b_id AND connectableci_id = :this->remote_b_ci_id]]>
                    </filter>
                    <dependencies>
                        <attribute id="remote_b_ci_id" />
                        <attribute id="interfaceconnector_b_id" />
                    </dependencies>
                </field>
                <field id="remote_b_interface_name" xsi:type="AttributeExternalField">
                    <extkey_attcode>remote_b_interface_id</extkey_attcode>
                    <target_attcode>name</target_attcode>
                </field>
                <field id="length" xsi:type="AttributeDecimal">
                    <sql>length</sql>
                    <default_value />
                    <is_null_allowed>true</is_null_allowed>
                    <digits>7</digits>
                    <decimals>2</decimals>
                </field>
                <field id="straight-crossed" xsi:type="AttributeEnum">
                    <values>
                        <value id="straight">straight</value>
                        <value id="crossed">crossed</value>
                    </values>
                    <sql>straight-crossed</sql>
                    <default_value>straight</default_value>
                    <is_null_allowed>true</is_null_allowed>
                    <display_style> radio_horizontal</display_style>
                </field>
            </fields>
            <relations>
                <relation id="impacts">
                    <neighbours>
                        <neighbour id="remote_a_interface">
                            <attribute>remote_a_interface_id</attribute>
                        </neighbour>
                        <neighbour id="remote_b_interface">
                            <attribute>remote_b_interface_id</attribute>
                        </neighbour>
                    </neighbours>
                </relation>
            </relations>
            <presentation>
                <details>
                    <items>
                        <item id="fieldset:Class:PatchCable:baseinfo">
                            <rank>10</rank>
                            <items>
                                <item id="name">
                                    <rank>10</rank>
                                </item>
                                <item id="org_id">
                                    <rank>20</rank>
                                </item>
                                <item id="location_id">
                                    <rank>30</rank>
                                </item>
                                <item id="description">
                                    <rank>40</rank>
                                </item>
                                <item id="patchcabletype_id">
                                    <rank>50</rank>
                                </item>
                                <item id="patchcablecolor_id">
                                    <rank>60</rank>
                                </item>
                                <item id="length">
                                    <rank>70</rank>
                                </item>
                                <item id="straight-crossed">
                                    <rank>80</rank>
                                </item>
                                <item id="status">
                                    <rank>90</rank>
                                </item>
                            </items>
                        </item>
                        <item id="fieldset:Class:PatchCable:sidea">
                            <rank>20</rank>
                            <items>
                                <item id="interfaceconnector_a_id">
                                    <rank>80</rank>
                                </item>
                                <item id="remote_a_ci_id">
                                    <rank>90</rank>
                                </item>
                                <item id="remote_a_interface_id">
                                    <rank>100</rank>
                                </item>
                            </items>
                        </item>
                        <item id="fieldset:Class:PatchCable:sideb">
                            <rank>30</rank>
                            <items>
                                <item id="interfaceconnector_b_id">
                                    <rank>110</rank>
                                </item>
                                <item id="remote_b_ci_id">
                                    <rank>120</rank>
                                </item>
                                <item id="remote_b_interface_id">
                                    <rank>130</rank>
                                </item>
                            </items>
                        </item>
                    </items>
                </details>
                <search>
                    <items>
                        <item id="name">
                            <rank>10</rank>
                        </item>
                        <item id="location_id">
                            <rank>20</rank>
                        </item>
                        <item id="status">
                            <rank>30</rank>
                        </item>
                        <item id="patchcabletype_id">
                            <rank>40</rank>
                        </item>
                        <item id="patchcablecolor_id">
                            <rank>50</rank>
                        </item>
                        <item id="length">
                            <rank>60</rank>
                        </item>
                        <item id="straight-crossed">
                            <rank>70</rank>
                        </item>
                        <item id="interfaceconnector_a_id">
                            <rank>80</rank>
                        </item>
                        <item id="remote_a_interface_id">
                            <rank>90</rank>
                        </item>
                        <item id="interfaceconnector_b_id">
                            <rank>100</rank>
                        </item>
                        <item id="remote_b_interface_id">
                            <rank>110</rank>
                        </item>
                    </items>
                </search>
                <list>
                    <items>
                        <item id="name">
                            <rank>10</rank>
                        </item>
                        <item id="location_id">
                            <rank>20</rank>
                        </item>
                        <item id="status">
                            <rank>30</rank>
                        </item>
                        <item id="patchcabletype_id">
                            <rank>40</rank>
                        </item>
                        <item id="patchcablecolor_id">
                            <rank>50</rank>
                        </item>
                        <item id="interfaceconnector_a_id">
                            <rank>60</rank>
                        </item>
                        <item id="remote_a_interface_id">
                            <rank>70</rank>
                        </item>
                        <item id="interfaceconnector_b_id">
                            <rank>80</rank>
                        </item>
                        <item id="remote_b_interface_id">
                            <rank>90</rank>
                        </item>
                    </items>
                </list>
            </presentation>
            <methods>
                <method id="ConnectCable">
                    <static>false</static>
                    <access>protected</access>
                    <type>Overload-cmdbAbstractObject</type>
                    <code>
                        <![CDATA[protected function ConnectCable()
						{
							// End side A
							if (!(empty($this->Get('remote_a_interface_id'))))
							{
								// try to get the port this cable is connected to
								$oInterface = MetaModel::GetObject('PhysicalInterface', $this->Get('remote_a_interface_id'));
								if (is_object($oInterface) && (get_class($oInterface) == 'PatchPanelPort' || get_class($oInterface) == 'PhysicalInterface'))
								{
									$sOQL = "SELECT PhysicalInterface WHERE id = :device";
									$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('device' => $this->Get('remote_a_interface_id'),));

									// There should be one link - do it in a safe manner anyway
									while ($oConnection = $oConnectionSet->Fetch())
									{
										$oConnection->Set('patchcable_id', $this->GetKey());
										// set on each end the opposite end too (this is remote b by intend!)
										$oConnection->Set('patchcable_remote_port_id', $this->Get('remote_b_interface_id'));
										$oConnection->DBUpdate();
									}
								}
							}
							// End side B
							if (!(empty($this->Get('remote_b_interface_id'))))
							{
								// try to get the port this cable is connected to
								$oInterface = MetaModel::GetObject('PhysicalInterface', $this->Get('remote_b_interface_id'));
								if (is_object($oInterface) && (get_class($oInterface) == 'PatchPanelPort' || get_class($oInterface) == 'PhysicalInterface'))
								{
									$sOQL = "SELECT PhysicalInterface WHERE id = :device";
									$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('device' => $this->Get('remote_b_interface_id'),));

									// There should be one link - do it in a safe manner anyway
									while ($oConnection = $oConnectionSet->Fetch())
									{
										$oConnection->Set('patchcable_id', $this->GetKey());
										// set on each end the opposite end too (this is remote a by intend!)
										$oConnection->Set('patchcable_remote_port_id', $this->Get('remote_a_interface_id'));
										$oConnection->DBUpdate();
									}
								}
							}
						}]]>
                    </code>
                </method>
                <method id="DisconnectCable">
                    <static>false</static>
                    <access>protected</access>
                    <type>Overload-cmdbAbstractObject</type>
                    <code>
                        <![CDATA[ protected function DisconnectCable()
						{
							// End side A
							if (!(empty($this->GetOriginal('remote_a_interface_id'))))
							{
								// try to get the port this cable was connected to
								// This one was hard to find : adding false in the next request allow a null answer
								// witch is OK as we have to test after operations anyway
								// see also $$mustBeFound value for MetaModel::GetObject
								$oInterface = MetaModel::GetObject('PhysicalInterface', $this->GetOriginal('remote_a_interface_id'), false);
								if (is_object($oInterface) && (get_class($oInterface) == 'PatchPanelPort' || get_class($oInterface) == 'PhysicalInterface'))
								{
									$sOQL = "SELECT PhysicalInterface WHERE patchcable_id = :device";
									$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('device' => $this->GetKey(),));

									// There should be one link - do it in a safe manner anyway
									while ($oConnection = $oConnectionSet->Fetch())
									{
										$oConnection->Set('patchcable_id', '');
										$oConnection->Set('patchcable_remote_port_id', '');
										$oConnection->DBUpdate();
									}
								}
							}
							// End side B
							if (!(empty($this->GetOriginal('remote_b_interface_id'))))
							{
								// try to get the port this cable was connected to
								// This one was hard to find : adding false in the next request allow a null answer
								// witch is OK as we have to test after operations anyway
								// see also $$mustBeFound value for MetaModel::GetObject
								$oInterface = MetaModel::GetObject('PhysicalInterface', $this->GetOriginal('remote_b_interface_id'), false);
								if (is_object($oInterface) && (get_class($oInterface) == 'PatchPanelPort' || get_class($oInterface) == 'PhysicalInterface'))
								{
									$sOQL = "SELECT PhysicalInterface WHERE patchcable_id = :device";
									$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('device' => $this->GetKey(),));

									// There should be one link - do it in a safe manner anyway
									while ($oConnection = $oConnectionSet->Fetch())
									{
										$oConnection->Set('patchcable_id', '');
										$oConnection->Set('patchcable_remote_port_id', '');
										$oConnection->DBUpdate();
									}
								}
							}
						}]]>
                    </code>
                </method>
                <method id="AfterInsert">
                    <static>false</static>
                    <access>protected</access>
                    <type>Overload-DBObject</type>
                    <code>
                        <![CDATA[protected function AfterInsert()
						{
							$this->ConnectCable();
							parent::AfterInsert();
			        	}]]>
                    </code>
                </method>
                <method id="OnUpdate">
                    <static>false</static>
                    <access>protected</access>
                    <type>Overload-DBObject</type>
                    <code>
                        <![CDATA[protected function OnUpdate()
						{
							$this->DisconnectCable();
							$this->ConnectCable();
							parent::OnUpdate();
				        }]]>
                    </code>
                </method>
                <method id="OnDelete">
                    <static>false</static>
                    <access>protected</access>
                    <type>Overload-DBObject</type>
                    <code>
                        <![CDATA[protected function OnDelete()
						{
							$this->DisconnectCable();
							parent::OnDelete();
				        }]]>
                    </code>
                </method>
            </methods>
        </class>

        <class id="PhysicalInterface" _delta="must_exist">
            <fields>
                <field id="servervirtualinterface_id" xsi:type="AttributeExternalKey" _delta="define">
                    <sql>servervirtualinterface_id</sql>
                    <target_class>ServerVirtualInterface</target_class>
                    <is_null_allowed>true</is_null_allowed>
                    <on_target_delete>DEL_MANUAL</on_target_delete>
                </field>
                <field id="servervirtualinterface_name" xsi:type="AttributeExternalField" _delta="define">
                    <extkey_attcode>servervirtualinterface_id</extkey_attcode>
                    <target_attcode>name</target_attcode>
                </field>
                <field id="patchcable_id" xsi:type="AttributeExternalKey" _delta="define">
                    <sql>patchcable_id</sql>
                    <target_class>PatchCable</target_class>
                    <is_null_allowed>true</is_null_allowed>
                    <on_target_delete>DEL_MANUAL</on_target_delete>
                    <filter>
                        <![CDATA[SELECT PatchCable WHERE (remote_a_interface_id = '' AND interfaceconnector_a_id = :this->interfaceconnector_id) OR (remote_b_interface_id = '' AND interfaceconnector_b_id = :this->interfaceconnector_id)]]>
                    </filter>
                    <dependencies />
                </field>
                <field id="patchcable_name" xsi:type="AttributeExternalField" _delta="define">
                    <extkey_attcode>patchcable_id</extkey_attcode>
                    <target_attcode>name</target_attcode>
                </field>
                <field id="patchcable_remote_port_id" xsi:type="AttributeExternalKey" _delta="define">
                    <sql>patchcable_remote_port_id</sql>
                    <target_class>PhysicalInterface</target_class>
                    <is_null_allowed>true</is_null_allowed>
                    <on_target_delete>DEL_MANUAL</on_target_delete>
                    <filter />
                    <dependencies />
                </field>
                <field id="patchcable_remote_port_name" xsi:type="AttributeExternalField" _delta="define">
                    <extkey_attcode>patchcable_remote_port_id</extkey_attcode>
                    <target_attcode>name</target_attcode>
                </field>
                <!-- this needs more testing
                <field id="connected_to_device_id" xsi:type="AttributeExternalKey" _delta="define">
                    <sql>connected_to_device_id</sql>
                    <is_null_allowed>true</is_null_allowed>
                    <target_class>ConnectableCI</target_class>
                    <on_target_delete>DEL_MANUAL</on_target_delete>
                    <filter>
                        <![CDATA[SELECT ConnectableCI WHERE finalclass != 'PatchPanel']]>
</filter>
</field>
<field id="connected_to_device_name" xsi:type="AttributeExternalField" _delta="define">
<extkey_attcode>connected_to_device_id</extkey_attcode>
<target_attcode>name</target_attcode>
</field>
<field id="connected_to_interface_id" xsi:type="AttributeExternalKey" _delta="define">
<sql>connected_to_interface_id</sql>
<target_class>PhysicalInterface</target_class>
<is_null_allowed>true</is_null_allowed>
<on_target_delete>DEL_MANUAL</on_target_delete>
<filter>
<![CDATA[SELECT PhysicalInterface AS G WHERE G.connected_to_interface_id = '' AND G.id != :this->id AND G.connectableci_id = :this->connected_to_device_id]]>
</filter>
<dependencies>
<attribute id="connected_to_device_id" />
</dependencies>
</field>
<field id="connected_to_interface_name" xsi:type="AttributeExternalField" _delta="define">
<extkey_attcode>connected_to_interface_id</extkey_attcode>
<target_attcode>name</target_attcode>
</field>
<field id="connection_impact" xsi:type="AttributeEnum" _delta="define">
<values>
<value id="impacts">impacts</value>
<value id="depends">depends</value>
</values>
<sql>impact</sql>
<default_value>depends</default_value>
<is_null_allowed>true</is_null_allowed>
<display_style>list</display_style>
</field>
            -->
            </fields>
            <!-- this needs more testing
            <methods>
                <method id="ConnectRemotePort" _delta="define">
                    <static>false</static>
                    <access>protected</access>
                    <type>Overload-cmdbAbstractObject</type>
                    <code>
                        <![CDATA[ protected function ConnectRemotePort()
						{
							// print "ConnectRemotePort begins<BR>";
							if (!(empty($this->Get('connected_to_interface_id'))))
							{
								// print "connected_to_name = ".$this->Get('connected_to_name')."<br>";
								// try to get the port this port is connected to
								$oInterface = MetaModel::GetObject('PhysicalInterface', $this->Get('connected_to_interface_id'));
								if (is_object($oInterface) && (get_class($oInterface) == 'PhysicalInterface'))
								{
									// print "Test Object OK<br>";
									$sOQL = "SELECT PhysicalInterface WHERE id = :device";
									$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL),
										array(),
										array(
											'device' => $this->Get('connected_to_interface_id'),
										)
									);

									// There should be one link - do it in a safe manner anyway
									while ($oConnection = $oConnectionSet->Fetch())
									{
										// print "En cours sur : '".$oConnection->Get('name')."'<br>";
										// if this port connection_impact is 'depends' then the other side is 'impacts'
										$sImpact = $this->Get('connection_impact');
										$sConnImpact = ($sImpact == 'impacts') ? 'depends' : 'impacts';
										$oConnection->Set('connected_to_interface_id', $this->GetKey());
										$oConnection->Set('connected_to_device_id', $this->Get('connectableci_id'));
										$oConnection->Set('connection_impact', $sConnImpact);
										$oConnection->DBUpdate();
									}
								}
							}
							// print "ConnectRemotePort ends<BR>";
						}]]>
</code>
</method>
<method id="DisconnectRemotePort" _delta="define">
<static>false</static>
<access>protected</access>
<type>Overload-cmdbAbstractObject</type>
<code>
<![CDATA[ protected function DisconnectRemotePort()
						{
							// print "DisconnectRemotePort begins<BR>";
							if (!(empty($this->GetOriginal('connected_to_interface_id'))))
							{
								// print "was connected_to_name = ".$this->GetOriginal('connected_to_name')."<br>";
								// try to get the port this port was connected to
								// This one was hard to find : adding false in the next request allow a null answer
								// witch is OK as we have to test after operations anyway
								// see also $$mustBeFound value for MetaModel::GetObject
								$oInterface = MetaModel::GetObject('PhysicalInterface', $this->GetOriginal('connected_to_interface_id'), false);
								if (is_object($oInterface) && (get_class($oInterface) == 'PhysicalInterface'))
								{
									// print "Test Object OK<br>";
									$sOQL = "SELECT PhysicalInterface WHERE connected_to_interface_id = :device";
									$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL),
										array(),
										array(
											'device' => $this->GetKey(),
										)
									);

									// There should be one link - do it in a safe manner anyway
									while ($oConnection = $oConnectionSet->Fetch())
									{
										// print "En cours sur : '".$oConnection->Get('name')."'<br>";
										// connection_impact is by default 'depends'
										$oConnection->Set('connected_to_interface_id', '');
										$oConnection->Set('connected_to_device_id', '');
										$oConnection->Set('connection_impact', 'depends');
										$oConnection->DBUpdate();
									}
								}
							}
							// print "DisconnectRemotePort ends<BR>";
						}]]>
</code>
</method>
<method id="AfterInsert" _delta="define">
<static>false</static>
<access>protected</access>
<type>Overload-DBObject</type>
<code>
<![CDATA[ protected function AfterInsert()
						{
							$this->ConnectRemotePort();
							parent::AfterInsert();
				        }]]>
</code>
</method>
<method id="OnUpdate" _delta="define">
<static>false</static>
<access>protected</access>
<type>Overload-DBObject</type>
<code>
<![CDATA[ protected function OnUpdate()
						{
							$this->DisconnectRemotePort();
							$this->ConnectRemotePort();
							parent::OnUpdate();
				        }]]>
</code>
</method>
<method id="OnDelete" _delta="define">
<static>false</static>
<access>protected</access>
<type>Overload-DBObject</type>
<code>
<![CDATA[ protected function OnDelete()
						{
							$this->DisconnectRemotePort();
							parent::OnDelete();
			        	}]]>
</code>
</method>
</methods>
        -->
            <presentation>
                <details>
                    <items>
                        <item id="col:col2">
                            <rank>50</rank>
                            <items>
                                <!-- this needs more testing
                                <item id="fieldset:Class:PhysicalInterface:connectedto" _delta="define">
                                    <rank>20</rank>
                                    <items>
                                        <item id="connected_to_device_id">
                                            <rank>10</rank>
                                        </item>
                                        <item id="connected_to_interface_id">
                                            <rank>20</rank>
                                        </item>
                                        <item id="connection_impact">
                                            <rank>30</rank>
                                        </item>
                                    </items>
                                </item>
                            -->
                                <item id="fieldset:Class:PhysicalInterface:patchcable" _delta="define">
                                    <rank>30</rank>
                                    <items>
                                        <item id="patchcable_id">
                                            <rank>10</rank>
                                        </item>
                                        <item id="patchcable_remote_port_id">
                                            <rank>20</rank>
                                        </item>
                                    </items>
                                </item>
                            </items>
                        </item>
                        <item id="servervirtualinterface_id" _delta="define">
                            <rank>119</rank>
                        </item>
                    </items>
                </details>
                <list>
                    <items>
                        <item id="patchcable_id" _delta="define">
                            <rank>120</rank>
                        </item>
                        <item id="patchcable_remote_port_id" _delta="define">
                            <rank>130</rank>
                        </item>
                    </items>
                </list>
                <search>
                    <items>
                        <item id="patchcable_id" _delta="define">
                            <rank>120</rank>
                        </item>
                    </items>
                </search>
            </presentation>
            <relations>
                <relations>
                    <relation id="impacts">
                        <neighbours>
                            <neighbour id="servervirtualinterface" _delta="define">
                                <attribute>servervirtualinterface_id</attribute>
                            </neighbour>
                        </neighbours>
                    </relation>
                </relations>
            </relations>
        </class>

        <!-- Virtual Server Network Interfaces (like bonding or teaming) -->
        <class id="ServerVirtualInterface" _delta="define">
            <parent>IPInterface</parent>
            <properties>
                <category>bizmodel,searchable</category>
                <abstract>false</abstract>
                <key_type>autoincrement</key_type>
                <db_table>servervirtualinterface</db_table>
                <db_key_field>id</db_key_field>
                <db_final_class_field />
                <naming>
                    <attributes>
                        <attribute id="name" />
                        <attribute id="server_name" />
                    </attributes>
                </naming>
                <display_template />
                <icon>images/ndvi.png</icon>
                <reconciliation>
                    <attributes>
                        <attribute id="name" />
                        <attribute id="server_id" />
                        <attribute id="server_name" />
                    </attributes>
                </reconciliation>
                <obsolescence>
                    <condition>server_id_obsolescence_flag</condition>
                </obsolescence>
            </properties>
            <fields>
                <field id="physicalinterface_list" xsi:type="AttributeLinkedSet">
                    <linked_class>PhysicalInterface</linked_class>
                    <ext_key_to_me>servervirtualinterface_id</ext_key_to_me>
                    <edit_mode>add_remove</edit_mode>
                    <count_min>0</count_min>
                    <count_max>0</count_max>
                </field>
                <field id="redundancy" xsi:type="AttributeRedundancySettings">
                    <sql>redundancy</sql>
                    <relation_code>impacts</relation_code>
                    <from_class>PhysicalInterface</from_class>
                    <neighbour_id>servervirtualinterface</neighbour_id>
                    <enabled>true</enabled>
                    <enabled_mode>user</enabled_mode>
                    <min_up>1</min_up>
                    <min_up_type>count</min_up_type>
                    <min_up_mode>user</min_up_mode>
                </field>
                <field id="server_id" xsi:type="AttributeExternalKey">
                    <sql>server_id</sql>
                    <target_class>Server</target_class>
                    <is_null_allowed>false</is_null_allowed>
                    <on_target_delete>DEL_AUTO</on_target_delete>
                </field>
                <field id="server_name" xsi:type="AttributeExternalField">
                    <extkey_attcode>server_id</extkey_attcode>
                    <target_attcode>name</target_attcode>
                </field>
                <field id="vlans_list" xsi:type="AttributeLinkedSetIndirect" _delta="define">
                    <linked_class>lnkServerVirtualInterfaceToVLAN</linked_class>
                    <ext_key_to_me>servervirtualinterface_id</ext_key_to_me>
                    <count_min>0</count_min>
                    <count_max>0</count_max>
                    <ext_key_to_remote>vlan_id</ext_key_to_remote>
                    <duplicates />
                </field>
                <field id="vrfs_list" xsi:type="AttributeLinkedSetIndirect" _delta="define">
                    <linked_class>lnkServerVirtualInterfaceToVRF</linked_class>
                    <ext_key_to_me>servervirtualinterface_id</ext_key_to_me>
                    <count_min>0</count_min>
                    <count_max>0</count_max>
                    <ext_key_to_remote>vrf_id</ext_key_to_remote>
                    <duplicates />
                </field>
                <field id="status" xsi:type="AttributeEnum">
                    <values>
                        <value>active</value>
                        <value>inactive</value>
                    </values>
                    <sql>status</sql>
                    <default_value>active</default_value>
                    <is_null_allowed>true</is_null_allowed>
                    <display_style>radio_horizontal</display_style>
                </field>
            </fields>
            <methods>
                <method id="PrefillSearchForm">
                    <code>
                        <![CDATA[public function PrefillSearchForm(&$aContextParam)
						{
                            if($aContextParam['dest_class'] == 'PhysicalInterface')
							{
                                //if(MetaModel::IsValidAttCode($aContextParam['dest_class'],'server_id') && !empty($aContextParam['source_obj']->Get('server_id')) && MetaModel::IsValidAttCode($aContextParam['dest_class'],'interfacespeed_id') && !empty($aContextParam['source_obj']->Get('interfacespeed_id')))
								if(MetaModel::IsValidAttCode($aContextParam['dest_class'],'connectableci_id') && !empty($aContextParam['source_obj']->Get('server_id')))
								{
									$aContextParam['filter']->ResetCondition();
									$aContextParam['filter']->AddCondition('connectableci_id', $aContextParam['source_obj']->Get('server_id'));
									$aContextParam['filter']->AddCondition('id',$aContextParam['source_obj']->GetKey(), '!=');
									}
							}
						}]]>
                    </code>
                </method>
            </methods>
            <relations>
                <relation id="impacts">
                    <neighbours>
                        <neighbour id="server">
                            <attribute>server_id</attribute>
                        </neighbour>
                    </neighbours>
                </relation>
            </relations>
            <presentation>
                <details>
                    <items>
                        <item id="col:col1">
                            <rank>10</rank>
                            <items>
                                <item id="fieldset:Class:NetworkInterface:baseinfo">
                                    <rank>10</rank>
                                    <items>
                                        <item id="name">
                                            <rank>10</rank>
                                        </item>
                                        <item id="status">
                                            <rank>20</rank>
                                        </item>
                                        <item id="server_id">
                                            <rank>30</rank>
                                        </item>
                                        <item id="comment">
                                            <rank>40</rank>
                                        </item>
                                    </items>
                                </item>
                            </items>
                        </item>
                        <item id="col:col2">
                            <rank>20</rank>
                            <items>
                                <item id="fieldset:Class:NetworkInterface:moreinfo">
                                    <rank>10</rank>
                                    <items>
                                        <item id="macaddress">
                                            <rank>10</rank>
                                        </item>
                                        <item id="interfacespeed_id" _delta="define">
                                            <rank>20</rank>
                                        </item>
                                        <item id="layer2protocol_id" _delta="define">
                                            <rank>30</rank>
                                        </item>
                                        <!--
                                        <item id="virtualcommredundancy_id">
                                            <rank>40</rank>
                                        </item>
                                    -->
                                    </items>
                                </item>
                            </items>
                        </item>
                        <item id="physicalinterface_list">
                            <rank>100</rank>
                        </item>
                        <item id="vlans_list">
                            <rank>110</rank>
                        </item>
                        <item id="vrfs_list">
                            <rank>120</rank>
                        </item>
                        <item id="ip_list">
                            <rank>130</rank>
                        </item>
                    </items>
                </details>
                <default_search>
                    <items>
                        <item id="name">
                            <rank>10</rank>
                        </item>
                        <item id="server_id">
                            <rank>20</rank>
                        </item>
                        <item id="status">
                            <rank>30</rank>
                        </item>
                        <item id="macaddress">
                            <rank>40</rank>
                        </item>
                    </items>
                </default_search>
                <search>
                    <items>
                        <item id="name">
                            <rank>10</rank>
                        </item>
                        <item id="server_id">
                            <rank>20</rank>
                        </item>
                        <item id="status">
                            <rank>30</rank>
                        </item>
                        <item id="macaddress">
                            <rank>40</rank>
                        </item>
                    </items>
                </search>
                <list>
                    <items>
                        <item id="server_id">
                            <rank>20</rank>
                        </item>
                        <item id="status">
                            <rank>30</rank>
                        </item>
                        <item id="macaddress">
                            <rank>40</rank>
                        </item>
                        <item id="comment">
                            <rank>60</rank>
                        </item>
                    </items>
                </list>
            </presentation>
        </class>

        <class id="lnkServerVirtualInterfaceToVLAN" _delta="define">
            <parent>cmdbAbstractObject</parent>
            <properties>
                <is_link>1</is_link>
                <category>bizmodel</category>
                <abstract>false</abstract>
                <key_type>autoincrement</key_type>
                <db_table>lnkservervirtualinterfacetovlan</db_table>
                <db_key_field>id</db_key_field>
                <db_final_class_field />
                <naming>
                    <format>%1$s %2$s</format>
                    <attributes>
                        <attribute id="servervirtualinterface_id" />
                        <attribute id="vlan_id" />
                    </attributes>
                </naming>
                <display_template />
                <icon />
                <reconciliation>
                    <attributes>
                        <attribute id="servervirtualinterface_id" />
                        <attribute id="vlan_id" />
                    </attributes>
                </reconciliation>
            </properties>
            <fields>
                <field id="servervirtualinterface_id" xsi:type="AttributeExternalKey">
                    <sql>servervirtualinterface_id</sql>
                    <target_class>ServerVirtualInterface</target_class>
                    <is_null_allowed>false</is_null_allowed>
                    <on_target_delete>DEL_AUTO</on_target_delete>
                </field>
                <field id="servervirtualinterface_name" xsi:type="AttributeExternalField">
                    <extkey_attcode>servervirtualinterface_id</extkey_attcode>
                    <target_attcode>name</target_attcode>
                </field>
                <field id="servervirtualinterface_device_id" xsi:type="AttributeExternalField">
                    <extkey_attcode>servervirtualinterface_id</extkey_attcode>
                    <target_attcode>server_id</target_attcode>
                </field>
                <field id="servervirtualinterface_device_name" xsi:type="AttributeExternalField">
                    <extkey_attcode>servervirtualinterface_id</extkey_attcode>
                    <target_attcode>server_name</target_attcode>
                </field>
                <field id="vlan_id" xsi:type="AttributeExternalKey">
                    <sql>vlan_id</sql>
                    <target_class>VLAN</target_class>
                    <is_null_allowed>false</is_null_allowed>
                    <on_target_delete>DEL_AUTO</on_target_delete>
                </field>
                <field id="vlan_tag" xsi:type="AttributeExternalField">
                    <extkey_attcode>vlan_id</extkey_attcode>
                    <target_attcode>vlan_tag</target_attcode>
                </field>
            </fields>
            <methods />
            <presentation>
                <details>
                    <items>
                        <item id="servervirtualinterface_id">
                            <rank>10</rank>
                        </item>
                        <item id="vlan_id">
                            <rank>20</rank>
                        </item>
                    </items>
                </details>
                <search>
                    <items>
                        <item id="servervirtualinterface_id">
                            <rank>10</rank>
                        </item>
                        <item id="vlan_id">
                            <rank>20</rank>
                        </item>
                    </items>
                </search>
                <list>
                    <items>
                        <item id="servervirtualinterface_id">
                            <rank>10</rank>
                        </item>
                        <item id="vlan_id">
                            <rank>20</rank>
                        </item>
                    </items>
                </list>
            </presentation>
        </class>

        <class id="lnkServerVirtualInterfaceToVRF" _delta="define">
            <parent>cmdbAbstractObject</parent>
            <properties>
                <is_link>1</is_link>
                <category>bizmodel</category>
                <abstract>false</abstract>
                <key_type>autoincrement</key_type>
                <db_table>lnkservervirtualinterfacetovrf</db_table>
                <db_key_field>id</db_key_field>
                <db_final_class_field />
                <naming>
                    <format>%1$s %2$s</format>
                    <attributes>
                        <attribute id="servervirtualinterface_id" />
                        <attribute id="vrf_id" />
                    </attributes>
                </naming>
                <display_template />
                <icon />
                <reconciliation>
                    <attributes>
                        <attribute id="servervirtualinterface_id" />
                        <attribute id="vrf_id" />
                    </attributes>
                </reconciliation>
            </properties>
            <fields>
                <field id="servervirtualinterface_id" xsi:type="AttributeExternalKey">
                    <sql>servervirtualinterface_id</sql>
                    <target_class>ServerVirtualInterface</target_class>
                    <is_null_allowed>false</is_null_allowed>
                    <on_target_delete>DEL_AUTO</on_target_delete>
                </field>
                <field id="servervirtualinterface_name" xsi:type="AttributeExternalField">
                    <extkey_attcode>servervirtualinterface_id</extkey_attcode>
                    <target_attcode>name</target_attcode>
                </field>
                <field id="servervirtualinterface_device_id" xsi:type="AttributeExternalField">
                    <extkey_attcode>servervirtualinterface_id</extkey_attcode>
                    <target_attcode>server_id</target_attcode>
                </field>
                <field id="physicalinterface_device_name" xsi:type="AttributeExternalField">
                    <extkey_attcode>servervirtualinterface_id</extkey_attcode>
                    <target_attcode>server_id</target_attcode>
                </field>
                <field id="vrf_id" xsi:type="AttributeExternalKey">
                    <sql>vrf_id</sql>
                    <target_class>VRF</target_class>
                    <is_null_allowed>false</is_null_allowed>
                    <on_target_delete>DEL_AUTO</on_target_delete>
                </field>
                <field id="vfr_name" xsi:type="AttributeExternalField">
                    <extkey_attcode>vrf_id</extkey_attcode>
                    <target_attcode>name</target_attcode>
                </field>
            </fields>
            <methods />
            <presentation>
                <details>
                    <items>
                        <item id="servervirtualinterface_id">
                            <rank>10</rank>
                        </item>
                        <item id="vrf_id">
                            <rank>20</rank>
                        </item>
                    </items>
                </details>
                <search>
                    <items>
                        <item id="servervirtualinterface_id">
                            <rank>10</rank>
                        </item>
                        <item id="vrf_id">
                            <rank>20</rank>
                        </item>
                    </items>
                </search>
                <list>
                    <items>
                        <item id="servervirtualinterface_id">
                            <rank>10</rank>
                        </item>
                        <item id="vrf_id">
                            <rank>20</rank>
                        </item>
                    </items>
                </list>
            </presentation>
        </class>

        <class id="Server" _delta="must_exist">
            <fields>
                <field id="servervirtualinterfaces_list" xsi:type="AttributeLinkedSet" _delta="define">
                    <linked_class>ServerVirtualInterface</linked_class>
                    <ext_key_to_me>server_id</ext_key_to_me>
                    <tracking_level />
                    <edit_mode />
                </field>
            </fields>
            <presentation>
                <details>
                    <items>
                        <item id="servervirtualinterfaces_list" _delta="define">
                            <rank>55</rank>
                        </item>
                    </items>
                </details>
            </presentation>
        </class>

        <class id="VLAN" _delta="must_exist">
            <fields>
                <field id="servervirtualinterfaces_list" xsi:type="AttributeLinkedSetIndirect" _delta="define">
                    <linked_class>lnkServerVirtualInterfaceToVLAN</linked_class>
                    <ext_key_to_me>vlan_id</ext_key_to_me>
                    <count_min>0</count_min>
                    <count_max>0</count_max>
                    <ext_key_to_remote>servervirtualinterface_id</ext_key_to_remote>
                    <duplicates />
                </field>
            </fields>
            <presentation>
                <details>
                    <items>
                        <item id="servervirtualinterfaces_list" _delta="define">
                            <rank>35</rank>
                        </item>
                    </items>
                </details>
            </presentation>
        </class>
    </classes>
    <menus>
        <menu id="ConfigManagementOverview" xsi:type="DashboardMenuNode" _delta="must_exist">
            <definition>
                <cells>
                    <cell id="4" _delta="must_exist">
                        <!-- Dashboard -> Miscellaneous -->
                        <dashlets>
                            <dashlet id="99" xsi:type="DashletBadge" _delta="define">
                                <rank>8</rank>
                                <class>PatchCable</class>
                            </dashlet>
                        </dashlets>
                    </cell>
                </cells>
            </definition>
        </menu>
        <menu id="Typology" xsi:type="DashboardMenuNode" _delta="must_exist">
            <definition>
                <cells>
                    <cell id="Network">
                        <dashlets>
                            <dashlet id="patchcablecolor" xsi:type="DashletBadge" _delta="define">
                                <rank>13</rank>
                                <class>PatchCableColor</class>
                            </dashlet>
                            <dashlet id="patchcabletype" xsi:type="DashletBadge" _delta="define">
                                <rank>14</rank>
                                <class>PatchCableType</class>
                            </dashlet>
                        </dashlets>
                    </cell>
                </cells>
            </definition>
        </menu>
    </menus>
</itop_design>
